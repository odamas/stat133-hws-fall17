quantile(vect, 0.1)[[1]]
}
# Gets the 90th percentile of a vector
get_percentile90 <- function(vect, na.rm = TRUE){
if(mode(vect) != 'numeric') stop("non-numeric argument")
if(na.rm == TRUE){vect <- remove_missing(vect)}
quantile(vect, 0.9)[[1]]
}
# Computes the first quartile of a vector
get_quartile1 <- function(vect, na.rm = TRUE){
if(mode(vect) != 'numeric') stop("non-numeric argument")
if(na.rm == TRUE){vect <- remove_missing(vect)}
quantile(vect, 0.25)[[1]]
}
# Computes the 3rd quartile of a vector
get_quartile3 <- function(vect, na.rm = TRUE){
if(mode(vect) != 'numeric') stop("non-numeric argument")
if(na.rm == TRUE){vect <- remove_missing(vect)}
quantile(vect, 0.75)[[1]]
}
# Computes mean of the input vector
get_average <- function(vect, na.rm = TRUE){
if(mode(vect) != 'numeric') stop("non-numeric argument")
if(na.rm == TRUE){
vect <- remove_missing(vect)
}
total <- 0
for (i in 1:length(vect)){
total <- total + vect[i]
}
total/length(vect)
}
# Computes the SD of the input vector
get_stdev <- function(vect, na.rm = TRUE){
if(mode(vect) != 'numeric') stop("non-numeric argument")
if(na.rm == TRUE){
vect <- remove_missing(vect)
}
avg <- get_average(vect)
total <- 0
for (i in 1:length(vect)){
total <- total+(vect[i]-avg)**2
}
sqrt(total/(length(vect)-1))
}
# Calcs number of missing values
count_missing <- function(vect){
total <- 0
for (i in 1:length(vect)){
total <- total + anyNA(vect[i])
}
total
}
# Returns the list of summary stats.
summary_stats <- function(vect){
list(minimum = get_minimum(vect), percent10 = get_percentile10(vect),
quartile1 = get_quartile1(vect),median = get_median(vect),
quartile3 = get_quartile3(vect), percent90 = get_percentile90(vect),
maximum = get_maximum(vect), range = get_range(vect),
stdev = get_stdev(vect), missing = count_missing(vect)
)
}
# Makes numbers to 4 decimal places.
formulate <- function(num){
sprintf('%0.4f', num)
}
# Prints the value in a nice format
print_stats <- function(lst){
name <- names(lst)
outcome <- c()
for (i in 1:length(lst)){
if (nchar(name[i])==max(nchar(names(lst)))){
cat(name[i], ": ", formulate(lst[[i]]), "\n", sep = "")
}
else{
cat(name[i], c(rep(" ", max(nchar(names(lst)))-nchar(
name[i]))), ": ", formulate(lst[[i]]), "\n", sep = "")
}
}
}
# Drops the lowest score
drop_lowest <- function(n){
n[n!=get_minimum(n)]
}
# Rescales a vector from 0-100
rescale100 <- function(x, xmin, xmax){
100*(x-xmin)/(xmax-xmin)
}
# Takes a numeric vector of homework scores (of length n),
# and an optional logical argument drop, to compute a single homework value.
# If drop = TRUE, the lowest HW score must be dropped.
score_homework <- function(n, drop = TRUE){
if(drop==TRUE){n <- drop_lowest(n)}
get_average(n)
}
# takes a numeric vector of quiz scores (of length n), and an optional
# logical argument drop, to compute a single quiz value
# The function should return the average of the quiz scores
score_quiz <- function(n, drop = TRUE){
if(drop==TRUE){n <- drop_lowest(n)}
get_average(n)
}
# Takes the numeric value of lab attendance, and returns the lab score.
score_lab <- function(n){
if(n==11 | n==12){100}
else if(n==10){80}
else if(n==9){60}
else if(n==8){40}
else if(n==7){20}
else if(n<=6){0}
}
# Reading the CSV of the raw scores.
df = read.csv("desktop/stat-133/stat133-hws-fall17/hw04/data/rawdata/rawscores.csv")
# Sinking the structure of the data grame to a file inside the output folder.
sink(file = 'desktop/stat-133/stat133-hws-fall17/hw04/output/summary-rawscores.txt')
str(df)
apply(df, 2, summary_stats)
print_stats(df)
sink()
# Replacing NA's with zeros.
for (i in  names(df)) {
df[i][is.na(df[i])] <- 0
}
# Rescaling QZ1
df$QZ1 <- rescale100(df$QZ1, 0, 12)
# Rescaling QZ2
df$QZ2 <- rescale100(df$QZ2, 0, 18)
# Rescaling QZ3
df$QZ3 <- rescale100(df$QZ3, 0, 20)
# Rescaling QZ4
df$QZ4 <- rescale100(df$QZ4, 0, 20)
# Rescaling and adding Test1 by rescaling ex1
df$test1 <- rescale100(df$EX1, 0, 80)
# Rescaling and adding Test2 by rescaling ex1
df$test2 <- rescale100(df$EX2, 0, 90)
# Adding variable homework to score data frame.
# Contains the overall homework score obtained by
# dropping the lowest HW and then aversaging the
# remaining scores.
df$homework[1] <- 100
for (i in c(2:334)) {
df$homework[i] <- score_homework(unlist(df[i, 1:9], use.names = FALSE), drop = TRUE)
}
# Adding quiz variable
df$quiz[1] <- 100
for (i in c(2:334)) {
df$quiz[i] <- score_homework(unlist(df[i, 11:14], use.names = FALSE), drop = TRUE)
}
df
# Reading the CSV of the raw scores.
df = read.csv("desktop/stat-133/stat133-hws-fall17/hw04/data/rawdata/rawscores.csv")
# Sinking the structure of the data grame to a file inside the output folder.
sink(file = 'desktop/stat-133/stat133-hws-fall17/hw04/output/summary-rawscores.txt')
str(df)
apply(df, 2, summary_stats)
print_stats(df)
sink()
# Replacing NA's with zeros.
for (i in  names(df)) {
df[i][is.na(df[i])] <- 0
}
# Rescaling QZ1
df$QZ1 <- rescale100(df$QZ1, 0, 12)
# Rescaling QZ2
df$QZ2 <- rescale100(df$QZ2, 0, 18)
# Rescaling QZ3
df$QZ3 <- rescale100(df$QZ3, 0, 20)
# Rescaling QZ4
df$QZ4 <- rescale100(df$QZ4, 0, 20)
# Rescaling and adding Test1 by rescaling ex1
df$test1 <- rescale100(df$EX1, 0, 80)
# Rescaling and adding Test2 by rescaling ex1
df$test2 <- rescale100(df$EX2, 0, 90)
# Adding variable homework to score data frame.
# Contains the overall homework score obtained by
# dropping the lowest HW and then aversaging the
# remaining scores.
df$homework[1] <- 100
for (i in c(2:334)) {
df$homework[i] <- score_homework(unlist(df[i, 1:9], use.names = FALSE), drop = TRUE)
}
# Adding quiz variable
df$quiz[1] <- 100
for (i in c(2:334)) {
df$quiz[i] <- score_homework(unlist(df[i, 11:14], use.names = FALSE), drop = TRUE)
}
df
df
df
# Adding lab variable
df$lab[1] <- 100
for (i in c(2:334)) {
df$lab[i] <- score_lab(unlist(df[i, 10], use.names = FALSE), drop = TRUE)
}
df
# Adding lab variable
df$lab[1] <- 100
for (i in c(2:334)) {
df$lab[i] <- score_lab(unlist(df[i, 10], use.names = FALSE))
}
df
unlist(df[1, 17])
2*2
for (i in c(1:334)) {
df$overall[i] <- .20 * unlist(df[i, 17]) + .25 * unlist(df[i, 18]) + .30*unlist(df[i, 19]) + .15*unlist(df[i, 20]) + .1*unlist(df[i, 21])
}
df
print_stats(df)
print_stats(df$HW1)
print_sta
print_stats(df)
str(df)
if (n < 50 && n > 0)
'a'
# Reading the CSV of the raw scores.
df = read.csv("desktop/stat-133/stat133-hws-fall17/hw04/data/rawdata/rawscores.csv")
# Sinking the structure of the data grame to a file inside the output folder.
sink(file = 'desktop/stat-133/stat133-hws-fall17/hw04/output/summary-rawscores.txt')
str(df)
apply(df, 2, summary_stats)
print_stats(df)
sink()
# Replacing NA's with zeros.
for (i in  names(df)) {
df[i][is.na(df[i])] <- 0
}
# Rescaling QZ1
df$QZ1 <- rescale100(df$QZ1, 0, 12)
# Rescaling QZ2
df$QZ2 <- rescale100(df$QZ2, 0, 18)
# Rescaling QZ3
df$QZ3 <- rescale100(df$QZ3, 0, 20)
# Rescaling QZ4
df$QZ4 <- rescale100(df$QZ4, 0, 20)
# Rescaling and adding Test1 by rescaling ex1
df$test1 <- rescale100(df$EX1, 0, 80)
# Rescaling and adding Test2 by rescaling ex1
df$test2 <- rescale100(df$EX2, 0, 90)
# Adding variable homework to score data frame.
# Contains the overall homework score obtained by
# dropping the lowest HW and then aversaging the
# remaining scores.
df$homework[1] <- 100
for (i in c(2:334)) {
df$homework[i] <- score_homework(unlist(df[i, 1:9], use.names = FALSE), drop = TRUE)
}
# Adding quiz variable
df$quiz[1] <- 100
for (i in c(2:334)) {
df$quiz[i] <- score_homework(unlist(df[i, 11:14], use.names = FALSE), drop = TRUE)
}
# Adding lab variable
df$lab[1] <- 100
for (i in c(2:334)) {
df$lab[i] <- score_lab(unlist(df[i, 10], use.names = FALSE))
}
# Adding overall
for (i in c(1:334)) {
df$overall[i] <- .20 * unlist(df[i, 17]) + .25 * unlist(df[i, 18]) + .30*unlist(df[i, 19]) + .15*unlist(df[i, 20]) + .1*unlist(df[i, 21])
}
# Adding grades
score_overall <- function(n){
if (n <= 50) {
'F'
}
else if (n <= 60 && n > 50) {
'D'
}
else if (n <= 70 && n > 60) {
'C-'
}
else if (n <= 77.5 && n > 70) {
'C'
}
else if (n <= 79.5 && n > 77.5) {
'C+'
}
else if (n <= 82 && n > 79.5) {
'B-'
}
else if (n <= 86 && n > 82) {
'B'
}
else if (n <= 88 && n > 86) {
'B'
}
else if (n <= 88 && n > 86) {
'B+'
}
else if (n <= 90 && n > 88) {
'A-'
}
else if (n <= 95 && n > 90) {
'A'
}
else if (n <= 100 && n > 95) {
'A+'
}
}
df$Grade <- score_overall(df$overall)
# Reading the CSV of the raw scores.
df = read.csv("desktop/stat-133/stat133-hws-fall17/hw04/data/rawdata/rawscores.csv")
# Sinking the structure of the data grame to a file inside the output folder.
sink(file = 'desktop/stat-133/stat133-hws-fall17/hw04/output/summary-rawscores.txt')
str(df)
apply(df, 2, summary_stats)
print_stats(df)
sink()
# Replacing NA's with zeros.
for (i in  names(df)) {
df[i][is.na(df[i])] <- 0
}
# Rescaling QZ1
df$QZ1 <- rescale100(df$QZ1, 0, 12)
# Rescaling QZ2
df$QZ2 <- rescale100(df$QZ2, 0, 18)
# Rescaling QZ3
df$QZ3 <- rescale100(df$QZ3, 0, 20)
# Rescaling QZ4
df$QZ4 <- rescale100(df$QZ4, 0, 20)
# Rescaling and adding Test1 by rescaling ex1
df$test1 <- rescale100(df$EX1, 0, 80)
# Rescaling and adding Test2 by rescaling ex1
df$test2 <- rescale100(df$EX2, 0, 90)
# Adding variable homework to score data frame.
# Contains the overall homework score obtained by
# dropping the lowest HW and then aversaging the
# remaining scores.
df$homework[1] <- 100
for (i in c(2:334)) {
df$homework[i] <- score_homework(unlist(df[i, 1:9], use.names = FALSE), drop = TRUE)
}
# Adding quiz variable
df$quiz[1] <- 100
for (i in c(2:334)) {
df$quiz[i] <- score_homework(unlist(df[i, 11:14], use.names = FALSE), drop = TRUE)
}
# Adding lab variable
df$lab[1] <- 100
for (i in c(2:334)) {
df$lab[i] <- score_lab(unlist(df[i, 10], use.names = FALSE))
}
# Adding overall
for (i in c(1:334)) {
df$overall[i] <- .20 * unlist(df[i, 17]) + .25 * unlist(df[i, 18]) + .30*unlist(df[i, 19]) + .15*unlist(df[i, 20]) + .1*unlist(df[i, 21])
}
# Adding grades
score_overall <- function(n){
if (n <= 50) {
'F'
}
else if (n <= 60 && n > 50) {
'D'
}
else if (n <= 70 && n > 60) {
'C-'
}
else if (n <= 77.5 && n > 70) {
'C'
}
else if (n <= 79.5 && n > 77.5) {
'C+'
}
else if (n <= 82 && n > 79.5) {
'B-'
}
else if (n <= 86 && n > 82) {
'B'
}
else if (n <= 88 && n > 86) {
'B'
}
else if (n <= 88 && n > 86) {
'B+'
}
else if (n <= 90 && n > 88) {
'A-'
}
else if (n <= 95 && n > 90) {
'A'
}
else if (n <= 100 && n > 95) {
'A+'
}
}
df
# Adding grade
for (i in c(1:334)) {
df$Grade[i] <- score_overall(unlist(df[i, 22], use.names = FALSE), drop = TRUE)
}
df
# Adding grade
for (i in c(1:334)) {
df$Grade[i] <- score_overall(unlist(df[i, 22], use.names = FALSE), drop = TRUE)
}
for (i in c(1:334)) {
df$Grade[i] <- score_overall(unlist(df[i, 22], use.names = FALSE))
}
df
str(df)
# Reading the CSV of the raw scores.
df = read.csv("desktop/stat-133/stat133-hws-fall17/hw04/data/rawdata/rawscores.csv")
# Sinking the structure of the data grame to a file inside the output folder.
sink(file = 'desktop/stat-133/stat133-hws-fall17/hw04/output/summary-rawscores.txt')
str(df)
apply(df, 2, summary_stats)
print_stats(df)
sink()
# Replacing NA's with zeros.
for (i in  names(df)) {
df[i][is.na(df[i])] <- 0
}
# Rescaling QZ1
df$QZ1 <- rescale100(df$QZ1, 0, 12)
# Rescaling QZ2
df$QZ2 <- rescale100(df$QZ2, 0, 18)
# Rescaling QZ3
df$QZ3 <- rescale100(df$QZ3, 0, 20)
# Rescaling QZ4
df$QZ4 <- rescale100(df$QZ4, 0, 20)
# Rescaling and adding Test1 by rescaling ex1
df$test1 <- rescale100(df$EX1, 0, 80)
# Rescaling and adding Test2 by rescaling ex1
df$test2 <- rescale100(df$EX2, 0, 90)
# Adding variable homework to score data frame.
# Contains the overall homework score obtained by
# dropping the lowest HW and then aversaging the
# remaining scores.
df$homework[1] <- 100
for (i in c(2:334)) {
df$homework[i] <- score_homework(unlist(
df[i, 1:9], use.names = FALSE), drop = TRUE)
}
# Adding quiz variable
df$quiz[1] <- 100
for (i in c(2:334)) {
df$quiz[i] <- score_homework(unlist(
df[i, 11:14], use.names = FALSE), drop = TRUE)
}
# Adding lab variable
df$lab[1] <- 100
for (i in c(2:334)) {
df$lab[i] <- score_lab(unlist(
df[i, 10], use.names = FALSE))
}
# Adding overall
for (i in c(1:334)) {
df$overall[i] <- .20 * unlist(df[i, 17]) + .25 * unlist(
df[i, 18]) + .30*unlist(df[i, 19]) + .15*unlist(
df[i, 20]) + .1*unlist(df[i, 21])
}
# Adding grades
score_overall <- function(n){
if (n <= 50) {
'F'
}
else if (n <= 60 && n > 50) {
'D'
}
else if (n <= 70 && n > 60) {
'C-'
}
else if (n <= 77.5 && n > 70) {
'C'
}
else if (n <= 79.5 && n > 77.5) {
'C+'
}
else if (n <= 82 && n > 79.5) {
'B-'
}
else if (n <= 86 && n > 82) {
'B'
}
else if (n <= 88 && n > 86) {
'B'
}
else if (n <= 88 && n > 86) {
'B+'
}
else if (n <= 90 && n > 88) {
'A-'
}
else if (n <= 95 && n > 90) {
'A'
}
else if (n <= 100 && n > 95) {
'A+'
}
}
# Adding grade
for (i in c(1:334)) {
df$Grade[i] <- score_overall(
unlist(df[i, 22], use.names = FALSE))
}
# Writing a for loop in which you use summary_stats and print_stats
# to export, via sink(), the summary statistics for Lab, Homework, Quiz
# Test1, Test2, and overall. They will all go inside of the output folder.
for (i in names(df)) {
y <- df[i]
}
getwd()
setwd("/Users/Mudit/desktop/stat-133/stat133-hws-fall17/hw04/output")
getwd()
for (i in names_vect){
sink(file = i)
}
names_vect <- c("Lab-stats.txt", "Homework-stats.txt", "Quiz-stats.txt",
"Test1-stats.txt", "Test2-stats.txt", "Overall-stats.txt")
for (i in names_vect){
sink(file = i)
}
